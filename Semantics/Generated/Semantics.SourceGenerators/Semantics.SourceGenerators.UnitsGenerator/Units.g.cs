// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.
// <auto-generated />

namespace ktsu.Semantics;

/// <summary>
/// Unit information record
/// </summary>
public record UnitInfo(string Name, string Symbol, string System, string Magnitude = "", string ConversionFactor = "", string Offset = "");

/// <summary>
/// Static registry of commonly used units organized by physical domain.
/// </summary>
public static class Units
{

	// === ACOUSTICS ===

	/// <summary>Hertz - SI derived unit of frequency.</summary>
	public static readonly UnitInfo Hertz = new(
		name: "Hertz",
		symbol: "Hz",
		system: "SIDerived"
	);


	// === ANGULARMECHANICS ===

	/// <summary>Radians per second - SI derived unit of angular velocity.</summary>
	public static readonly UnitInfo RadiansPerSecond = new(
		name: "RadiansPerSecond",
		symbol: "rad/s",
		system: "SIDerived"
	);

	/// <summary>Radians per second squared - SI derived unit of angular acceleration.</summary>
	public static readonly UnitInfo RadiansPerSecondSquared = new(
		name: "RadiansPerSecondSquared",
		symbol: "rad/s²",
		system: "SIDerived"
	);

	/// <summary>Revolutions per minute - Common unit of angular velocity.</summary>
	public static readonly UnitInfo RevolutionsPerMinute = new(
		name: "RevolutionsPerMinute",
		symbol: "rpm",
		system: "Other"
		, conversionFactor: "RevolutionsPerMinuteToRadiansPerSecond"
	);


	// === CHEMISTRY ===

	/// <summary>Molar - Moles per liter concentration.</summary>
	public static readonly UnitInfo Molar = new(
		name: "Molar",
		symbol: "M",
		system: "SIDerived"
		, conversionFactor: "MolarToCubicMeter"
	);

	/// <summary>Mole - SI base unit of amount of substance.</summary>
	public static readonly UnitInfo Mole = new(
		name: "Mole",
		symbol: "mol",
		system: "SIBase"
	);


	// === CLASSICALMECHANICS ===

	/// <summary>Standard atmosphere - Unit of pressure.</summary>
	public static readonly UnitInfo Atmosphere = new(
		name: "Atmosphere",
		symbol: "atm",
		system: "Other"
		, conversionFactor: "AtmosphereToPascals"
	);

	/// <summary>Bar - Metric unit of pressure.</summary>
	public static readonly UnitInfo Bar = new(
		name: "Bar",
		symbol: "bar",
		system: "SIDerived"
		, conversionFactor: "BarToPascals"
	);

	/// <summary>Calorie - Thermochemical calorie, energy unit.</summary>
	public static readonly UnitInfo Calorie = new(
		name: "Calorie",
		symbol: "cal",
		system: "Other"
		, conversionFactor: "CalorieToJoules"
	);

	/// <summary>Electron volt - Energy unit equal to electron charge times one volt.</summary>
	public static readonly UnitInfo ElectronVolt = new(
		name: "ElectronVolt",
		symbol: "eV",
		system: "Other"
		, conversionFactor: "ElectronVoltToJoules"
	);

	/// <summary>Mechanical horsepower - Imperial unit of power.</summary>
	public static readonly UnitInfo Horsepower = new(
		name: "Horsepower",
		symbol: "hp",
		system: "Imperial"
		, conversionFactor: "HorsepowerToWatts"
	);

	/// <summary>Joule - SI derived unit of energy.</summary>
	public static readonly UnitInfo Joule = new(
		name: "Joule",
		symbol: "J",
		system: "SIDerived"
	);

	/// <summary>Kilogram-meter squared - SI derived unit of moment of inertia.</summary>
	public static readonly UnitInfo KilogramMeterSquared = new(
		name: "KilogramMeterSquared",
		symbol: "kg⋅m²",
		system: "SIDerived"
	);

	/// <summary>Kilogram-meter squared per second - SI derived unit of angular momentum.</summary>
	public static readonly UnitInfo KilogramMeterSquaredPerSecond = new(
		name: "KilogramMeterSquaredPerSecond",
		symbol: "kg⋅m²/s",
		system: "SIDerived"
	);

	/// <summary>Kilometers per hour - Common unit of velocity.</summary>
	public static readonly UnitInfo KilometersPerHour = new(
		name: "KilometersPerHour",
		symbol: "km/h",
		system: "SIDerived"
		, conversionFactor: "KilometersPerHourToMetersPerSecond"
	);

	/// <summary>Kilowatt-hour - Common unit of electrical energy.</summary>
	public static readonly UnitInfo KilowattHour = new(
		name: "KilowattHour",
		symbol: "kWh",
		system: "SIDerived"
		, conversionFactor: "KilowattHourToJoules"
	);

	/// <summary>Meters per second - SI derived unit of velocity.</summary>
	public static readonly UnitInfo MetersPerSecond = new(
		name: "MetersPerSecond",
		symbol: "m/s",
		system: "SIDerived"
	);

	/// <summary>Meters per second squared - SI derived unit of acceleration.</summary>
	public static readonly UnitInfo MetersPerSecondSquared = new(
		name: "MetersPerSecondSquared",
		symbol: "m/s²",
		system: "SIDerived"
	);

	/// <summary>Miles per hour - Imperial unit of velocity.</summary>
	public static readonly UnitInfo MilesPerHour = new(
		name: "MilesPerHour",
		symbol: "mph",
		system: "Imperial"
		, conversionFactor: "MilesPerHourToMetersPerSecond"
	);

	/// <summary>Newton - SI derived unit of force.</summary>
	public static readonly UnitInfo Newton = new(
		name: "Newton",
		symbol: "N",
		system: "SIDerived"
	);

	/// <summary>Newton-meter - SI derived unit of torque.</summary>
	public static readonly UnitInfo NewtonMeter = new(
		name: "NewtonMeter",
		symbol: "N⋅m",
		system: "SIDerived"
	);

	/// <summary>Newton-second - SI derived unit of momentum.</summary>
	public static readonly UnitInfo NewtonSecond = new(
		name: "NewtonSecond",
		symbol: "N⋅s",
		system: "SIDerived"
	);

	/// <summary>Pascal - SI derived unit of pressure.</summary>
	public static readonly UnitInfo Pascal = new(
		name: "Pascal",
		symbol: "Pa",
		system: "SIDerived"
	);

	/// <summary>Pound-foot - Imperial unit of torque.</summary>
	public static readonly UnitInfo PoundFoot = new(
		name: "PoundFoot",
		symbol: "lb⋅ft",
		system: "Imperial"
		, conversionFactor: "PoundFootToNewtonMeters"
	);

	/// <summary>Pounds per square inch - Imperial unit of pressure.</summary>
	public static readonly UnitInfo Psi = new(
		name: "Psi",
		symbol: "psi",
		system: "Imperial"
		, conversionFactor: "PsiToPascals"
	);

	/// <summary>Watt - SI derived unit of power.</summary>
	public static readonly UnitInfo Watt = new(
		name: "Watt",
		symbol: "W",
		system: "SIDerived"
	);


	// === ELECTROMAGNETISM ===

	/// <summary>Ampere - SI base unit of electric current.</summary>
	public static readonly UnitInfo Ampere = new(
		name: "Ampere",
		symbol: "A",
		system: "SIBase"
	);

	/// <summary>Coulomb - SI derived unit of electric charge.</summary>
	public static readonly UnitInfo Coulomb = new(
		name: "Coulomb",
		symbol: "C",
		system: "SIDerived"
	);

	/// <summary>Farad - SI derived unit of electric capacitance.</summary>
	public static readonly UnitInfo Farad = new(
		name: "Farad",
		symbol: "F",
		system: "SIDerived"
	);

	/// <summary>Ohm - SI derived unit of electric resistance.</summary>
	public static readonly UnitInfo Ohm = new(
		name: "Ohm",
		symbol: "Ω",
		system: "SIDerived"
	);

	/// <summary>Volt - SI derived unit of electric potential.</summary>
	public static readonly UnitInfo Volt = new(
		name: "Volt",
		symbol: "V",
		system: "SIDerived"
	);

	/// <summary>Volt per meter - SI derived unit of electric field strength.</summary>
	public static readonly UnitInfo VoltPerMeter = new(
		name: "VoltPerMeter",
		symbol: "V/m",
		system: "SIDerived"
	);


	// === FLUIDMECHANICS ===

	/// <summary>Kilogram per cubic meter - SI derived unit of density.</summary>
	public static readonly UnitInfo KilogramPerCubicMeter = new(
		name: "KilogramPerCubicMeter",
		symbol: "kg/m³",
		system: "SIDerived"
	);


	// === FUNDAMENTAL ===

	/// <summary>Angstrom - 10⁻¹⁰ meters, used for atomic scales.</summary>
	public static readonly UnitInfo Angstrom = new(
		name: "Angstrom",
		symbol: "Å",
		system: "Other"
		, conversionFactor: "AngstromToMeters"
	);

	/// <summary>Centimeter - 0.01 meters.</summary>
	public static readonly UnitInfo Centimeter = new(
		name: "Centimeter",
		symbol: "cm",
		system: "SIDerived"
		, magnitude: "Centi"
	);

	/// <summary>Cubic meter - SI derived unit of volume.</summary>
	public static readonly UnitInfo CubicMeter = new(
		name: "CubicMeter",
		symbol: "m³",
		system: "SIDerived"
	);

	/// <summary>Day - 86400 seconds.</summary>
	public static readonly UnitInfo Day = new(
		name: "Day",
		symbol: "d",
		system: "Other"
		, conversionFactor: "DayToSeconds"
	);

	/// <summary>Degree - Common unit of plane angle.</summary>
	public static readonly UnitInfo Degree = new(
		name: "Degree",
		symbol: "°",
		system: "Other"
		, conversionFactor: "DegreeToRadians"
	);

	/// <summary>Dimensionless - Pure number or ratio with no physical units.</summary>
	public static readonly UnitInfo Dimensionless = new(
		name: "Dimensionless",
		symbol: "1",
		system: "SIBase"
	);

	/// <summary>Foot - Imperial unit of length.</summary>
	public static readonly UnitInfo Foot = new(
		name: "Foot",
		symbol: "ft",
		system: "Imperial"
		, conversionFactor: "FeetToMeters"
	);

	/// <summary>US gallon - Imperial unit of volume.</summary>
	public static readonly UnitInfo Gallon = new(
		name: "Gallon",
		symbol: "gal",
		system: "Imperial"
		, conversionFactor: "GallonToCubicMeters"
	);

	/// <summary>Gram - 0.001 kilograms.</summary>
	public static readonly UnitInfo Gram = new(
		name: "Gram",
		symbol: "g",
		system: "SIDerived"
		, magnitude: "Milli"
	);

	/// <summary>Hour - 3600 seconds.</summary>
	public static readonly UnitInfo Hour = new(
		name: "Hour",
		symbol: "h",
		system: "Other"
		, conversionFactor: "HourToSeconds"
	);

	/// <summary>Inch - Imperial unit of length.</summary>
	public static readonly UnitInfo Inch = new(
		name: "Inch",
		symbol: "in",
		system: "Imperial"
		, conversionFactor: "InchesToMeters"
	);

	/// <summary>Kilogram - SI base unit of mass.</summary>
	public static readonly UnitInfo Kilogram = new(
		name: "Kilogram",
		symbol: "kg",
		system: "SIBase"
	);

	/// <summary>Kilometer - 1000 meters.</summary>
	public static readonly UnitInfo Kilometer = new(
		name: "Kilometer",
		symbol: "km",
		system: "SIDerived"
		, magnitude: "Kilo"
	);

	/// <summary>Liter - 0.001 cubic meters.</summary>
	public static readonly UnitInfo Liter = new(
		name: "Liter",
		symbol: "L",
		system: "SIDerived"
		, conversionFactor: "LiterToCubicMeters"
	);

	/// <summary>Meter - SI base unit of length.</summary>
	public static readonly UnitInfo Meter = new(
		name: "Meter",
		symbol: "m",
		system: "SIBase"
	);

	/// <summary>Micrometer - 0.000001 meters.</summary>
	public static readonly UnitInfo Micrometer = new(
		name: "Micrometer",
		symbol: "μm",
		system: "SIDerived"
		, magnitude: "Micro"
	);

	/// <summary>Microsecond - 0.000001 seconds.</summary>
	public static readonly UnitInfo Microsecond = new(
		name: "Microsecond",
		symbol: "μs",
		system: "SIDerived"
		, magnitude: "Micro"
	);

	/// <summary>Mile - Imperial unit of length.</summary>
	public static readonly UnitInfo Mile = new(
		name: "Mile",
		symbol: "mi",
		system: "Imperial"
		, conversionFactor: "MileToMeters"
	);

	/// <summary>Milliliter - 0.001 liters.</summary>
	public static readonly UnitInfo Milliliter = new(
		name: "Milliliter",
		symbol: "mL",
		system: "SIDerived"
		, magnitude: "Milli"
	);

	/// <summary>Millimeter - 0.001 meters.</summary>
	public static readonly UnitInfo Millimeter = new(
		name: "Millimeter",
		symbol: "mm",
		system: "SIDerived"
		, magnitude: "Milli"
	);

	/// <summary>Millisecond - 0.001 seconds.</summary>
	public static readonly UnitInfo Millisecond = new(
		name: "Millisecond",
		symbol: "ms",
		system: "SIDerived"
		, magnitude: "Milli"
	);

	/// <summary>Minute - 60 seconds.</summary>
	public static readonly UnitInfo Minute = new(
		name: "Minute",
		symbol: "min",
		system: "Other"
		, conversionFactor: "MinuteToSeconds"
	);

	/// <summary>Nanometer - 0.000000001 meters.</summary>
	public static readonly UnitInfo Nanometer = new(
		name: "Nanometer",
		symbol: "nm",
		system: "SIDerived"
		, magnitude: "Nano"
	);

	/// <summary>Ounce - Imperial unit of mass.</summary>
	public static readonly UnitInfo Ounce = new(
		name: "Ounce",
		symbol: "oz",
		system: "Imperial"
		, conversionFactor: "OunceToKilograms"
	);

	/// <summary>Pound - Imperial unit of mass.</summary>
	public static readonly UnitInfo Pound = new(
		name: "Pound",
		symbol: "lb",
		system: "Imperial"
		, conversionFactor: "PoundToKilograms"
	);

	/// <summary>Radian - SI derived unit of plane angle.</summary>
	public static readonly UnitInfo Radian = new(
		name: "Radian",
		symbol: "rad",
		system: "SIDerived"
	);

	/// <summary>Second - SI base unit of time.</summary>
	public static readonly UnitInfo Second = new(
		name: "Second",
		symbol: "s",
		system: "SIBase"
	);

	/// <summary>Square foot - Imperial unit of area.</summary>
	public static readonly UnitInfo SquareFoot = new(
		name: "SquareFoot",
		symbol: "ft²",
		system: "Imperial"
		, conversionFactor: "SquareFootToSquareMeters"
	);

	/// <summary>Square inch - Imperial unit of area.</summary>
	public static readonly UnitInfo SquareInch = new(
		name: "SquareInch",
		symbol: "in²",
		system: "Imperial"
		, conversionFactor: "SquareInchToSquareMeters"
	);

	/// <summary>Square meter - SI derived unit of area.</summary>
	public static readonly UnitInfo SquareMeter = new(
		name: "SquareMeter",
		symbol: "m²",
		system: "SIDerived"
	);

	/// <summary>Metric ton - 1000 kilograms.</summary>
	public static readonly UnitInfo Ton = new(
		name: "Ton",
		symbol: "t",
		system: "SIDerived"
		, conversionFactor: "TonToKilograms"
	);

	/// <summary>Yard - Imperial unit of length.</summary>
	public static readonly UnitInfo Yard = new(
		name: "Yard",
		symbol: "yd",
		system: "Imperial"
		, conversionFactor: "YardToMeters"
	);

	/// <summary>Year - 365.25 days (31557600 seconds).</summary>
	public static readonly UnitInfo Year = new(
		name: "Year",
		symbol: "yr",
		system: "Other"
		, conversionFactor: "YearToSeconds"
	);


	// === NUCLEARPHYSICS ===

	/// <summary>Barn - Unit of nuclear cross section.</summary>
	public static readonly UnitInfo Barn = new(
		name: "Barn",
		symbol: "b",
		system: "Other"
		, conversionFactor: "BarnToSquareMeters"
	);

	/// <summary>Becquerel - SI derived unit of radioactive activity.</summary>
	public static readonly UnitInfo Becquerel = new(
		name: "Becquerel",
		symbol: "Bq",
		system: "SIDerived"
	);

	/// <summary>Gray - SI derived unit of absorbed dose.</summary>
	public static readonly UnitInfo Gray = new(
		name: "Gray",
		symbol: "Gy",
		system: "SIDerived"
	);

	/// <summary>Sievert - SI derived unit of equivalent dose.</summary>
	public static readonly UnitInfo Sievert = new(
		name: "Sievert",
		symbol: "Sv",
		system: "SIDerived"
	);


	// === OPTICS ===

	/// <summary>Candela - SI base unit of luminous intensity.</summary>
	public static readonly UnitInfo Candela = new(
		name: "Candela",
		symbol: "cd",
		system: "SIBase"
	);

	/// <summary>Diopter - SI unit of optical power.</summary>
	public static readonly UnitInfo Diopter = new(
		name: "Diopter",
		symbol: "D",
		system: "SIDerived"
	);

	/// <summary>Lumen - SI derived unit of luminous flux.</summary>
	public static readonly UnitInfo Lumen = new(
		name: "Lumen",
		symbol: "lm",
		system: "SIDerived"
	);

	/// <summary>Lux - SI derived unit of illuminance.</summary>
	public static readonly UnitInfo Lux = new(
		name: "Lux",
		symbol: "lx",
		system: "SIDerived"
	);


	// === THERMODYNAMICS ===

	/// <summary>Celsius - Common temperature scale.</summary>
	public static readonly UnitInfo Celsius = new(
		name: "Celsius",
		symbol: "°C",
		system: "SIDerived"
		, offset: "CelsiusToKelvinOffset"
	);

	/// <summary>Fahrenheit - Imperial temperature scale.</summary>
	public static readonly UnitInfo Fahrenheit = new(
		name: "Fahrenheit",
		symbol: "°F",
		system: "Imperial"
		, conversionFactor: "FahrenheitScale"
		, offset: "FahrenheitToKelvinOffset"
	);

	/// <summary>Kelvin - SI base unit of thermodynamic temperature.</summary>
	public static readonly UnitInfo Kelvin = new(
		name: "Kelvin",
		symbol: "K",
		system: "SIBase"
	);

}
