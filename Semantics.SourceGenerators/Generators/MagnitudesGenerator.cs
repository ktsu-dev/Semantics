// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.

namespace Semantics.SourceGenerators;
using System.Linq;
using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Semantics.SourceGenerators.Models;

/// <summary>
/// JSON metadata-driven source generator for MetricMagnitudes
/// </summary>
[Generator]
public class MagnitudesGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// Find the metric magnitudes metadata JSON file
		IncrementalValuesProvider<string> metadataFiles = context.AdditionalTextsProvider
			.Where(file => file.Path.EndsWith("magnitudes.json", System.StringComparison.InvariantCulture))
			.Select((file, cancellationToken) => file.GetText(cancellationToken)?.ToString() ?? "")
			.Where(content => !string.IsNullOrEmpty(content));

		// Generate code from metadata
		context.RegisterSourceOutput(metadataFiles, (ctx, jsonContent) =>
		{
			if (string.IsNullOrEmpty(jsonContent))
			{
				return;
			}

			try
			{
				JsonSerializerOptions options = new()
				{
					PropertyNameCaseInsensitive = true
				};

				MagnitudesMetadata metadata = JsonSerializer.Deserialize<MagnitudesMetadata>(jsonContent, options) ??
					throw new JsonException("Failed to deserialize units metadata");

				if (metadata == null)
				{
					return;
				}

				// Generate the MetricMagnitudes class
				string code = GenerateMetricMagnitudes(metadata);
				ctx.AddSource("MetricMagnitudes.g.cs", SourceText.From(code, Encoding.UTF8));
			}
			catch (JsonException ex)
			{
				// Report JSON parsing error
				DiagnosticDescriptor descriptor = new(
					"MMG001",
					"JSON parsing error",
					"Failed to parse metric magnitudes metadata JSON: {0}",
					"SourceGenerator",
					DiagnosticSeverity.Error,
					isEnabledByDefault: true);

				ctx.ReportDiagnostic(Diagnostic.Create(descriptor, Location.None, ex.Message));
			}
		});
	}

	private static string GenerateMetricMagnitudes(MagnitudesMetadata metadata)
	{
		StringBuilder sb = new();

		// Header
		sb.AppendLine("// Copyright (c) ktsu.dev");
		sb.AppendLine("// All rights reserved.");
		sb.AppendLine("// Licensed under the MIT license.");
		sb.AppendLine("// <auto-generated />");
		sb.AppendLine();
		sb.AppendLine("namespace ktsu.Semantics;");
		sb.AppendLine();
		sb.AppendLine("/// <summary>");
		sb.AppendLine("/// Metric magnitude constants for unit scaling.");
		sb.AppendLine("/// </summary>");
		sb.AppendLine("public static class MetricMagnitudes");
		sb.AppendLine("{");

		// Generate constants for each magnitude
		foreach (MagnitudeDefinition magnitude in metadata.Magnitudes)
		{
			sb.AppendLine($"\t/// <summary>{magnitude.Name} magnitude: 10^{magnitude.Exponent}</summary>");

			// Calculate value from exponent
			string valueString = magnitude.Exponent switch
			{
				0 => "1.0",
				> 0 => $"1e{magnitude.Exponent}",
				< 0 => $"1e{magnitude.Exponent}"
			};

			sb.AppendLine($"\tpublic const double {magnitude.Name} = {valueString};");
			sb.AppendLine();
		}

		sb.AppendLine("}");

		return sb.ToString();
	}
}
