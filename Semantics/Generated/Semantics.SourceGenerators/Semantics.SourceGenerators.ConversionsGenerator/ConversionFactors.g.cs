// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.
// <auto-generated />

namespace ktsu.Semantics;

using System.Globalization;
using ktsu.PreciseNumber;

/// <summary>
/// Static registry of conversion factors used by the units system.
/// </summary>
public static class ConversionFactors
{

	// === ANGULAR ===

	/// <summary>Degree to radian conversion: π/180 rad/° (exact)</summary>
	public static readonly PreciseNumber DegreeToRadians = PreciseNumber.Parse("0.017453292519943295769236907684886127134428718885417254560971914401710091146034494436822415696345097379101040706699150667990539631694451077627806983", CultureInfo.InvariantCulture);


	// === ANGULARVELOCITY ===

	/// <summary>RPM to rad/s conversion: π/30 rad/s per rpm (exact)</summary>
	public static readonly PreciseNumber RevolutionsPerMinuteToRadiansPerSecond = PreciseNumber.Parse("0.10471975511965977", CultureInfo.InvariantCulture);


	// === AREA ===

	/// <summary>Barn to square meter conversion: 1e-28 m² (exact by definition)</summary>
	public static readonly PreciseNumber BarnToSquareMeters = PreciseNumber.Parse("1e-28", CultureInfo.InvariantCulture);

	/// <summary>Square foot to square meter conversion: 0.09290304 m²/ft² (exact)</summary>
	public static readonly PreciseNumber SquareFootToSquareMeters = PreciseNumber.Parse("0.09290304", CultureInfo.InvariantCulture);

	/// <summary>Square inch to square meter conversion: 0.00064516 m²/in² (exact)</summary>
	public static readonly PreciseNumber SquareInchToSquareMeters = PreciseNumber.Parse("0.00064516", CultureInfo.InvariantCulture);


	// === CONCENTRATION ===

	/// <summary>Molar to cubic meter concentration conversion: 1000.0 mol/m³ per mol/L (exact)</summary>
	public static readonly PreciseNumber MolarToCubicMeter = PreciseNumber.Parse("1000.0", CultureInfo.InvariantCulture);


	// === ENERGY ===

	/// <summary>Calorie to joule conversion: 4.184 J/cal (exact, thermochemical calorie)</summary>
	public static readonly PreciseNumber CalorieToJoules = PreciseNumber.Parse("4.184", CultureInfo.InvariantCulture);

	/// <summary>Electron volt to joule conversion: 1.602176634e-19 J/eV (exact, based on elementary charge)</summary>
	public static readonly PreciseNumber ElectronVoltToJoules = PreciseNumber.Parse("1.602176634e-19", CultureInfo.InvariantCulture);

	/// <summary>Mechanical horsepower to watt conversion: 745.6998715822702 W/hp (exact)</summary>
	public static readonly PreciseNumber HorsepowerToWatts = PreciseNumber.Parse("745.6998715822702", CultureInfo.InvariantCulture);

	/// <summary>Kilowatt-hour to joule conversion: 3600000 J/kWh (exact)</summary>
	public static readonly PreciseNumber KilowattHourToJoules = PreciseNumber.Parse("3600000", CultureInfo.InvariantCulture);


	// === LENGTH ===

	/// <summary>Angstrom to meter conversion: 1e-10 m/Å (exact by definition)</summary>
	public static readonly PreciseNumber AngstromToMeters = PreciseNumber.Parse("1e-10", CultureInfo.InvariantCulture);

	/// <summary>Foot to meter conversion: 0.3048 m/ft (exact by definition)</summary>
	public static readonly PreciseNumber FeetToMeters = PreciseNumber.Parse("0.3048", CultureInfo.InvariantCulture);

	/// <summary>Inch to meter conversion: 0.0254 m/in (exact by definition)</summary>
	public static readonly PreciseNumber InchesToMeters = PreciseNumber.Parse("0.0254", CultureInfo.InvariantCulture);

	/// <summary>Mile to meter conversion: 1609.344 m/mi (exact by definition)</summary>
	public static readonly PreciseNumber MileToMeters = PreciseNumber.Parse("1609.344", CultureInfo.InvariantCulture);

	/// <summary>Yard to meter conversion: 0.9144 m/yd (exact by definition)</summary>
	public static readonly PreciseNumber YardToMeters = PreciseNumber.Parse("0.9144", CultureInfo.InvariantCulture);


	// === MASS ===

	/// <summary>Ounce to kilogram conversion: 0.028349523125 kg/oz (exact)</summary>
	public static readonly PreciseNumber OunceToKilograms = PreciseNumber.Parse("0.028349523125", CultureInfo.InvariantCulture);

	/// <summary>Pound mass to kilogram: 0.453592 kg/lb (exact)</summary>
	public static readonly PreciseNumber PoundMassToKilogram = PreciseNumber.Parse("0.453592", CultureInfo.InvariantCulture);

	/// <summary>Pound to kilogram conversion: 0.45359237 kg/lb (exact by definition)</summary>
	public static readonly PreciseNumber PoundToKilograms = PreciseNumber.Parse("0.45359237", CultureInfo.InvariantCulture);

	/// <summary>Metric ton to kilogram conversion: 1000 kg/t (exact by definition)</summary>
	public static readonly PreciseNumber TonToKilograms = PreciseNumber.Parse("1000", CultureInfo.InvariantCulture);


	// === PRESSURE ===

	/// <summary>Atmosphere to pascal conversion: 101325 Pa/atm (exact by definition)</summary>
	public static readonly PreciseNumber AtmosphereToPascals = PreciseNumber.Parse("101325", CultureInfo.InvariantCulture);

	/// <summary>Bar to pascal conversion: 100000 Pa/bar (exact by definition)</summary>
	public static readonly PreciseNumber BarToPascals = PreciseNumber.Parse("100000", CultureInfo.InvariantCulture);

	/// <summary>PSI to pascal conversion: 6894.757293168361 Pa/psi (exact)</summary>
	public static readonly PreciseNumber PsiToPascals = PreciseNumber.Parse("6894.757293168361", CultureInfo.InvariantCulture);


	// === TEMPERATURE ===

	/// <summary>Celsius to Kelvin temperature offset: 273.15 K (exact by definition)</summary>
	public static readonly PreciseNumber CelsiusToKelvinOffset = PreciseNumber.Parse("273.15", CultureInfo.InvariantCulture);

	/// <summary>Fahrenheit degree scale factor: 9/5 = 1.8 (exact)</summary>
	public static readonly PreciseNumber FahrenheitScale = PreciseNumber.Parse("1.8", CultureInfo.InvariantCulture);

	/// <summary>Fahrenheit to Kelvin absolute offset: -459.67 K (exact)</summary>
	public static readonly PreciseNumber FahrenheitToKelvinOffset = PreciseNumber.Parse("-459.67", CultureInfo.InvariantCulture);


	// === TIME ===

	/// <summary>Day to second conversion: 86400 s/day (exact)</summary>
	public static readonly PreciseNumber DayToSeconds = PreciseNumber.Parse("86400", CultureInfo.InvariantCulture);

	/// <summary>Hour to second conversion: 3600 s/h (exact)</summary>
	public static readonly PreciseNumber HourToSeconds = PreciseNumber.Parse("3600", CultureInfo.InvariantCulture);

	/// <summary>Minute to second conversion: 60 s/min (exact)</summary>
	public static readonly PreciseNumber MinuteToSeconds = PreciseNumber.Parse("60", CultureInfo.InvariantCulture);

	/// <summary>Year to second conversion: 31557600 s/year (365.25 days, exact)</summary>
	public static readonly PreciseNumber YearToSeconds = PreciseNumber.Parse("31557600", CultureInfo.InvariantCulture);


	// === TORQUE ===

	/// <summary>Pound-foot to Newton-meter conversion: 1.3558179483314004 N⋅m per lb⋅ft (exact)</summary>
	public static readonly PreciseNumber PoundFootToNewtonMeters = PreciseNumber.Parse("1.3558179483314004", CultureInfo.InvariantCulture);


	// === VELOCITY ===

	/// <summary>Kilometers per hour to meters per second conversion: 0.2777777777777778 m/s per km/h (exact)</summary>
	public static readonly PreciseNumber KilometersPerHourToMetersPerSecond = PreciseNumber.Parse("0.2777777777777778", CultureInfo.InvariantCulture);

	/// <summary>Miles per hour to meters per second conversion: 0.44704 m/s per mph (exact)</summary>
	public static readonly PreciseNumber MilesPerHourToMetersPerSecond = PreciseNumber.Parse("0.44704", CultureInfo.InvariantCulture);


	// === VOLUME ===

	/// <summary>US gallon to cubic meter conversion: 0.003785411784 m³/gal (exact)</summary>
	public static readonly PreciseNumber GallonToCubicMeters = PreciseNumber.Parse("0.003785411784", CultureInfo.InvariantCulture);

	/// <summary>Liter to cubic meter conversion: 0.001 m³/L (exact by definition)</summary>
	public static readonly PreciseNumber LiterToCubicMeters = PreciseNumber.Parse("0.001", CultureInfo.InvariantCulture);

}
