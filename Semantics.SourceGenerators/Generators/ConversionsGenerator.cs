// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.

namespace Semantics.SourceGenerators;

using System.Linq;
using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Semantics.SourceGenerators.Models;

/// <summary>
/// Source generator that creates the ConversionFactors.cs file from JSON metadata.
/// </summary>
[Generator]
public class ConversionsGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// Find the conversions metadata JSON file
		IncrementalValuesProvider<string> metadataFiles = context.AdditionalTextsProvider
			.Where(file => file.Path.EndsWith("conversions.json", System.StringComparison.InvariantCulture))
			.Select((file, cancellationToken) => file.GetText(cancellationToken)?.ToString() ?? "")
			.Where(content => !string.IsNullOrEmpty(content));

		// Generate code from metadata
		context.RegisterSourceOutput(metadataFiles, (ctx, jsonContent) =>
		{
			if (string.IsNullOrEmpty(jsonContent))
			{
				return;
			}

			try
			{
				JsonSerializerOptions options = new()
				{
					PropertyNameCaseInsensitive = true
				};

				ConversionsMetadata metadata = JsonSerializer.Deserialize<ConversionsMetadata>(jsonContent, options) ??
					throw new JsonException("Failed to deserialize units metadata");

				if (metadata?.Conversions == null)
				{
					return;
				}

				// Generate the ConversionFactors.cs source code
				string sourceCode = GenerateConversionFactorsClass(metadata);

				// Add the generated source to the compilation
				ctx.AddSource("ConversionFactors.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
			}
			catch (JsonException ex)
			{
				// Report JSON parsing error
				DiagnosticDescriptor descriptor = new(
					"CONV001",
					"JSON parsing error",
					"Failed to parse conversions metadata JSON: {0}",
					"SourceGenerator",
					DiagnosticSeverity.Error,
					isEnabledByDefault: true);

				ctx.ReportDiagnostic(Diagnostic.Create(descriptor, Location.None, ex.Message));
			}
		});
	}

	private static string GenerateConversionFactorsClass(ConversionsMetadata metadata)
	{
		StringBuilder builder = new();

		builder.AppendLine("// Copyright (c) ktsu.dev");
		builder.AppendLine("// All rights reserved.");
		builder.AppendLine("// Licensed under the MIT license.");
		builder.AppendLine("// <auto-generated />");
		builder.AppendLine();
		builder.AppendLine("namespace ktsu.Semantics;");
		builder.AppendLine();
		builder.AppendLine("using System.Globalization;");
		builder.AppendLine("using ktsu.PreciseNumber;");
		builder.AppendLine();
		builder.AppendLine("/// <summary>");
		builder.AppendLine("/// Static registry of conversion factors used by the units system.");
		builder.AppendLine("/// </summary>");
		builder.AppendLine("public static class ConversionFactors");
		builder.AppendLine("{");

		// Generate each category
		foreach (ConversionCategory category in metadata.Conversions.OrderBy(c => c.Category))
		{
			if (category.Factors.Count != 0)
			{
				builder.AppendLine();
				builder.AppendLine($"\t// === {category.Category.ToUpperInvariant()} ===");
				builder.AppendLine();

				foreach (ConversionFactor factor in category.Factors.OrderBy(f => f.Name))
				{
					GenerateConversionFactor(builder, factor);
				}
			}
		}

		builder.AppendLine("}");
		return builder.ToString();
	}

	private static void GenerateConversionFactor(StringBuilder builder, ConversionFactor factor)
	{
		// Generate XML documentation
		builder.AppendLine($"\t/// <summary>{factor.Description}</summary>");

		// Parse the high-precision value and generate the property declaration
		builder.AppendLine($"\tpublic static readonly PreciseNumber {factor.Name} = PreciseNumber.Parse(\"{factor.Value}\", CultureInfo.InvariantCulture);");
		builder.AppendLine();
	}
}
