// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.
// <auto-generated />

namespace ktsu.Semantics;

using System.Globalization;
using System.Numerics;
using ktsu.PreciseNumber;

/// <summary>
/// Provides fundamental physical constants used throughout the Semantics library.
/// All values are based on the 2019 redefinition of SI base units and CODATA 2018 values.
/// </summary>
public static class PhysicalConstants
{

	/// <summary>
	/// The physics of sound and vibration, including wave propagation, acoustic properties, sound intensity, frequency analysis, and audio-related measurements
	/// </summary>
	public static class Acoustics
	{
	}

	/// <summary>
	/// Rotational motion and angular quantities, including angular velocity, angular acceleration, torque, and moment of inertia
	/// </summary>
	public static class AngularMechanics
	{
		/// <summary>Degrees per radian: 180/π ≈ 57.29577951308232</summary>
		public static readonly PreciseNumber DegreesPerRadian = PreciseNumber.Parse("57.29577951308232087679815481410517033240547246656432154916024386120284714832155263244096899585111094418897585567892854596978524038074810298080734906", CultureInfo.InvariantCulture);

		/// <summary>Radians per degree: π/180 ≈ 0.017453292519943295</summary>
		public static readonly PreciseNumber RadiansPerDegree = PreciseNumber.Parse("0.017453292519943295769236907684886127134428718885417254560971914401710091146034494436822415696345097379101040706699150667990539631694451077627806983", CultureInfo.InvariantCulture);

		/// <summary>2π - Full rotation in radians: 6.283185307179586</summary>
		public static readonly PreciseNumber TwoPi = PreciseNumber.Parse("6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234135964735462226659258240820374631042607435096896808248", CultureInfo.InvariantCulture);

	}

	/// <summary>
	/// The physics of celestial objects and cosmic phenomena, including stellar physics, planetary motion, cosmological quantities, and space-based measurements
	/// </summary>
	public static class Astrophysics
	{
	}

	/// <summary>
	/// The physics of atmospheric phenomena, including weather systems, atmospheric dynamics, meteorological quantities, and climate-related physical processes
	/// </summary>
	public static class AtmosphericPhysics
	{
	}

	/// <summary>
	/// Chemical quantities and processes, including molecular properties, reaction kinetics, chemical concentrations, and the physical aspects of chemical systems
	/// </summary>
	public static class Chemistry
	{
		/// <summary>Gas constant: 8.31446261815324 J/(mol·K) (exact, derived from Avogadro and Boltzmann constants)</summary>
		public static readonly PreciseNumber GasConstant = PreciseNumber.Parse("8.31446261815324", CultureInfo.InvariantCulture);

		/// <summary>Natural logarithm of 2: 0.6931471805599453</summary>
		public static readonly PreciseNumber Ln2 = PreciseNumber.Parse("0.6931471805599453094172321214581765680755001343602552541206800094933936219696947156058633269964186875420014810205706857336855202357581305570326707", CultureInfo.InvariantCulture);

		/// <summary>Molar volume of ideal gas at STP: 22.413969545014137 L/mol (calculated from R*T/P at 273.15K, 101325Pa)</summary>
		public static readonly PreciseNumber MolarVolumeSTP = PreciseNumber.Parse("22.413969545014137", CultureInfo.InvariantCulture);

		/// <summary>Neutral pH value at 25°C: 7.0</summary>
		public static readonly PreciseNumber NeutralPH = PreciseNumber.Parse("7.0", CultureInfo.InvariantCulture);

		/// <summary>Water ion product (Kw) at 25°C: 1.0 × 10⁻¹⁴ (pKw = 14.0)</summary>
		public static readonly PreciseNumber WaterIonProduct = PreciseNumber.Parse("14.0", CultureInfo.InvariantCulture);

	}

	/// <summary>
	/// The physics of motion for macroscopic objects, covering forces, momentum, energy, rotational dynamics, and the motion of particles and rigid bodies
	/// </summary>
	public static class ClassicalMechanics
	{
		/// <summary>Standard atmospheric pressure: 101,325 Pa (exact by definition)</summary>
		public static readonly PreciseNumber StandardAtmosphericPressure = PreciseNumber.Parse("101325", CultureInfo.InvariantCulture);

		/// <summary>Standard gravitational acceleration: 9.80665 m/s² (exact by definition)</summary>
		public static readonly PreciseNumber StandardGravity = PreciseNumber.Parse("9.80665", CultureInfo.InvariantCulture);

	}

	/// <summary>
	/// Numerical methods and computational techniques for solving complex physical problems, including simulation parameters, algorithmic constants, and numerical precision requirements
	/// </summary>
	public static class ComputationalPhysics
	{
	}

	/// <summary>
	/// Electric and magnetic phenomena and their interactions, including electric fields, magnetic fields, electromagnetic radiation, and electrical circuit properties
	/// </summary>
	public static class Electromagnetism
	{
	}

	/// <summary>
	/// The study of fluids (liquids and gases) in motion and at rest, including fluid properties, flow dynamics, viscosity, pressure, and fluid-structure interactions
	/// </summary>
	public static class FluidMechanics
	{
	}

	/// <summary>
	/// Basic physical quantities and constants that form the foundation of all other physics domains, including fundamental units like length, mass, time, and universal constants
	/// </summary>
	public static class Fundamental
	{
		/// <summary>Avogadro's number: 6.02214076 × 10²³ entities/mol (exact, SI defining constant)</summary>
		public static readonly PreciseNumber AvogadroNumber = PreciseNumber.Parse("6.02214076e23", CultureInfo.InvariantCulture);

		/// <summary>Boltzmann constant: 1.380649 × 10⁻²³ J/K (exact, SI defining constant)</summary>
		public static readonly PreciseNumber BoltzmannConstant = PreciseNumber.Parse("1.380649e-23", CultureInfo.InvariantCulture);

		/// <summary>Elementary charge: 1.602176634 × 10⁻¹⁹ C (exact, SI defining constant)</summary>
		public static readonly PreciseNumber ElementaryCharge = PreciseNumber.Parse("1.602176634e-19", CultureInfo.InvariantCulture);

		/// <summary>Fine structure constant: 7.2973525693 × 10⁻³ (dimensionless, 2018 CODATA)</summary>
		public static readonly PreciseNumber FineStructureConstant = PreciseNumber.Parse("7.2973525693e-3", CultureInfo.InvariantCulture);

		/// <summary>Gravitational constant: 6.67430 × 10⁻¹¹ m³/(kg⋅s²) (2018 CODATA)</summary>
		public static readonly PreciseNumber GravitationalConstant = PreciseNumber.Parse("6.67430e-11", CultureInfo.InvariantCulture);

		/// <summary>Magnetic permeability of free space: 4π × 10⁻⁷ H/m (exact by definition)</summary>
		public static readonly PreciseNumber PermeabilityOfFreeSpace = PreciseNumber.Parse("1.25663706212e-6", CultureInfo.InvariantCulture);

		/// <summary>Electric permittivity of free space: 8.8541878128 × 10⁻¹² F/m (exact, derived)</summary>
		public static readonly PreciseNumber PermittivityOfFreeSpace = PreciseNumber.Parse("8.8541878128e-12", CultureInfo.InvariantCulture);

		/// <summary>Planck constant: 6.62607015 × 10⁻³⁴ J·s (exact, SI defining constant)</summary>
		public static readonly PreciseNumber PlanckConstant = PreciseNumber.Parse("6.62607015e-34", CultureInfo.InvariantCulture);

		/// <summary>Speed of light in vacuum: 299,792,458 m/s (exact, SI defining constant)</summary>
		public static readonly PreciseNumber SpeedOfLight = PreciseNumber.Parse("299792458", CultureInfo.InvariantCulture);

	}

	/// <summary>
	/// The physics of Earth systems, including seismic waves, gravitational fields, magnetic fields, geological processes, and Earth's internal structure
	/// </summary>
	public static class Geophysics
	{
	}

	/// <summary>
	/// The study of atomic nuclei, radioactivity, nuclear reactions, decay processes, and radiation interactions with matter
	/// </summary>
	public static class NuclearPhysics
	{
	}

	/// <summary>
	/// The physics of light and optical phenomena, including electromagnetic radiation, photometry, illumination, optical properties, and light-matter interactions
	/// </summary>
	public static class Optics
	{
	}

	/// <summary>
	/// The physics of fundamental particles and their interactions, including elementary particles, high-energy phenomena, and quantum field theory applications
	/// </summary>
	public static class ParticlePhysics
	{
	}

	/// <summary>
	/// The analysis of structural behavior under various loads, including stress, strain, deformation, material properties, and the mechanical response of engineering structures
	/// </summary>
	public static class StructuralMechanics
	{
	}

	/// <summary>
	/// The physics of heat, temperature, and energy transfer, including thermal properties, heat capacity, entropy, and thermodynamic processes
	/// </summary>
	public static class Thermodynamics
	{
		/// <summary>Absolute zero in Celsius: 273.15 K (exact by definition)</summary>
		public static readonly PreciseNumber AbsoluteZeroInCelsius = PreciseNumber.Parse("273.15", CultureInfo.InvariantCulture);

		/// <summary>Standard temperature (STP): 273.15 K (0°C)</summary>
		public static readonly PreciseNumber StandardTemperature = PreciseNumber.Parse("273.15", CultureInfo.InvariantCulture);

		/// <summary>Water boiling point at 1 atm: 373.15 K (100°C)</summary>
		public static readonly PreciseNumber WaterBoilingPoint = PreciseNumber.Parse("373.15", CultureInfo.InvariantCulture);

		/// <summary>Water triple point: 273.16 K (exact by definition)</summary>
		public static readonly PreciseNumber WaterTriplePoint = PreciseNumber.Parse("273.16", CultureInfo.InvariantCulture);

	}

	/// <summary>
	/// Helper methods to get constants as generic numeric types
	/// </summary>
	public static class Generic
	{
		/// <summary>Gets absolute zero in celsius: 273.15 k (exact by definition) as type T</summary>
		public static T AbsoluteZeroInCelsius<T>() where T : struct, INumber<T> => T.CreateChecked(AbsoluteZeroInCelsius);

		/// <summary>Gets avogadro's number: 6.02214076 × 10²³ entities/mol (exact, si defining constant) as type T</summary>
		public static T AvogadroNumber<T>() where T : struct, INumber<T> => T.CreateChecked(AvogadroNumber);

		/// <summary>Gets boltzmann constant: 1.380649 × 10⁻²³ j/k (exact, si defining constant) as type T</summary>
		public static T BoltzmannConstant<T>() where T : struct, INumber<T> => T.CreateChecked(BoltzmannConstant);

		/// <summary>Gets degrees per radian: 180/π ≈ 57.29577951308232 as type T</summary>
		public static T DegreesPerRadian<T>() where T : struct, INumber<T> => T.CreateChecked(DegreesPerRadian);

		/// <summary>Gets elementary charge: 1.602176634 × 10⁻¹⁹ c (exact, si defining constant) as type T</summary>
		public static T ElementaryCharge<T>() where T : struct, INumber<T> => T.CreateChecked(ElementaryCharge);

		/// <summary>Gets fine structure constant: 7.2973525693 × 10⁻³ (dimensionless, 2018 codata) as type T</summary>
		public static T FineStructureConstant<T>() where T : struct, INumber<T> => T.CreateChecked(FineStructureConstant);

		/// <summary>Gets gas constant: 8.31446261815324 j/(mol·k) (exact, derived from avogadro and boltzmann constants) as type T</summary>
		public static T GasConstant<T>() where T : struct, INumber<T> => T.CreateChecked(GasConstant);

		/// <summary>Gets gravitational constant: 6.67430 × 10⁻¹¹ m³/(kg⋅s²) (2018 codata) as type T</summary>
		public static T GravitationalConstant<T>() where T : struct, INumber<T> => T.CreateChecked(GravitationalConstant);

		/// <summary>Gets natural logarithm of 2: 0.6931471805599453 as type T</summary>
		public static T Ln2<T>() where T : struct, INumber<T> => T.CreateChecked(Ln2);

		/// <summary>Gets molar volume of ideal gas at stp: 22.413969545014137 l/mol (calculated from r*t/p at 273.15k, 101325pa) as type T</summary>
		public static T MolarVolumeSTP<T>() where T : struct, INumber<T> => T.CreateChecked(MolarVolumeSTP);

		/// <summary>Gets neutral ph value at 25°c: 7.0 as type T</summary>
		public static T NeutralPH<T>() where T : struct, INumber<T> => T.CreateChecked(NeutralPH);

		/// <summary>Gets magnetic permeability of free space: 4π × 10⁻⁷ h/m (exact by definition) as type T</summary>
		public static T PermeabilityOfFreeSpace<T>() where T : struct, INumber<T> => T.CreateChecked(PermeabilityOfFreeSpace);

		/// <summary>Gets electric permittivity of free space: 8.8541878128 × 10⁻¹² f/m (exact, derived) as type T</summary>
		public static T PermittivityOfFreeSpace<T>() where T : struct, INumber<T> => T.CreateChecked(PermittivityOfFreeSpace);

		/// <summary>Gets planck constant: 6.62607015 × 10⁻³⁴ j·s (exact, si defining constant) as type T</summary>
		public static T PlanckConstant<T>() where T : struct, INumber<T> => T.CreateChecked(PlanckConstant);

		/// <summary>Gets radians per degree: π/180 ≈ 0.017453292519943295 as type T</summary>
		public static T RadiansPerDegree<T>() where T : struct, INumber<T> => T.CreateChecked(RadiansPerDegree);

		/// <summary>Gets speed of light in vacuum: 299,792,458 m/s (exact, si defining constant) as type T</summary>
		public static T SpeedOfLight<T>() where T : struct, INumber<T> => T.CreateChecked(SpeedOfLight);

		/// <summary>Gets standard atmospheric pressure: 101,325 pa (exact by definition) as type T</summary>
		public static T StandardAtmosphericPressure<T>() where T : struct, INumber<T> => T.CreateChecked(StandardAtmosphericPressure);

		/// <summary>Gets standard gravitational acceleration: 9.80665 m/s² (exact by definition) as type T</summary>
		public static T StandardGravity<T>() where T : struct, INumber<T> => T.CreateChecked(StandardGravity);

		/// <summary>Gets standard temperature (stp): 273.15 k (0°c) as type T</summary>
		public static T StandardTemperature<T>() where T : struct, INumber<T> => T.CreateChecked(StandardTemperature);

		/// <summary>Gets 2π - full rotation in radians: 6.283185307179586 as type T</summary>
		public static T TwoPi<T>() where T : struct, INumber<T> => T.CreateChecked(TwoPi);

		/// <summary>Gets water boiling point at 1 atm: 373.15 k (100°c) as type T</summary>
		public static T WaterBoilingPoint<T>() where T : struct, INumber<T> => T.CreateChecked(WaterBoilingPoint);

		/// <summary>Gets water ion product (kw) at 25°c: 1.0 × 10⁻¹⁴ (pkw = 14.0) as type T</summary>
		public static T WaterIonProduct<T>() where T : struct, INumber<T> => T.CreateChecked(WaterIonProduct);

		/// <summary>Gets water triple point: 273.16 k (exact by definition) as type T</summary>
		public static T WaterTriplePoint<T>() where T : struct, INumber<T> => T.CreateChecked(WaterTriplePoint);

	}
}
