// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.

namespace Semantics.SourceGenerators;

using System.Linq;
using System.Text.Json;
using ktsu.CodeBlocker;
using Microsoft.CodeAnalysis;
using Semantics.SourceGenerators.Templates;

public abstract class GeneratorBase<T>(string metadataFilename) : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// Find the conversions metadata JSON file
		IncrementalValuesProvider<string> metadataFiles = context.AdditionalTextsProvider
			.Where(file => file.Path.EndsWith(metadataFilename, System.StringComparison.InvariantCulture))
			.Select((file, cancellationToken) => file.GetText(cancellationToken)?.ToString() ?? "")
			.Where(content => !string.IsNullOrEmpty(content));

		// Generate code from metadata
		context.RegisterSourceOutput(metadataFiles, (ctx, jsonContent) =>
		{
			if (string.IsNullOrEmpty(jsonContent))
			{
				return;
			}

			try
			{
				JsonSerializerOptions options = new()
				{
					PropertyNameCaseInsensitive = true
				};

				T metadata = JsonSerializer.Deserialize<T>(jsonContent, options) ??
					throw new JsonException("Failed to deserialize metadata");

				using CodeBlocker codeBlocker = CodeBlocker.Create();
				Generate(ctx, metadata, codeBlocker);
			}
			catch (JsonException ex)
			{
				// Report JSON parsing error
				DiagnosticDescriptor descriptor = new(
					"CONV001",
					"JSON parsing error",
					"Failed to parse metadata JSON: {0}",
					"SourceGenerator",
					DiagnosticSeverity.Error,
					isEnabledByDefault: true);

				ctx.ReportDiagnostic(Diagnostic.Create(descriptor, Location.None, ex.Message));
			}
		});
	}

	protected abstract void Generate(SourceProductionContext context, T metadata, CodeBlocker codeBlocker);
	protected static void WriteHeaderTo(CodeBlocker codeBlocker)
	{
		codeBlocker.WriteLine("// Copyright (c) ktsu.dev");
		codeBlocker.WriteLine("// All rights reserved.");
		codeBlocker.WriteLine("// Licensed under the MIT license.");
		codeBlocker.WriteLine("// <auto-generated />");
		codeBlocker.NewLine();
	}

	internal static void WriteSourceFileTo(CodeBlocker codeBlocker, SourceFileTemplate sourceFileTemplate)
	{
		WriteHeaderTo(codeBlocker);
		sourceFileTemplate.WriteTo(codeBlocker);
	}
}
