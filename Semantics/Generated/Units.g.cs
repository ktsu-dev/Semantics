// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.
// <auto-generated />

namespace ktsu.Semantics.Units;

/// <summary>
/// Meter - SI base unit of length.
/// </summary>
public record struct Meter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Meter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "m";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Meter() { }
};

/// <summary>
/// Kilometer - 1000 meters.
/// </summary>
public record struct Kilometer : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Kilometer";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "km";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Kilometer() { }
};

/// <summary>
/// Centimeter - 0.01 meters.
/// </summary>
public record struct Centimeter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Centimeter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "cm";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Centimeter() { }
};

/// <summary>
/// Millimeter - 0.001 meters.
/// </summary>
public record struct Millimeter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Millimeter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "mm";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Millimeter() { }
};

/// <summary>
/// Foot - Imperial unit of length.
/// </summary>
public record struct Foot : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Foot";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "ft";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = FeetToMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Foot() { }
};

/// <summary>
/// Inch - Imperial unit of length.
/// </summary>
public record struct Inch : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Inch";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "in";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = InchesToMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Inch() { }
};

/// <summary>
/// Micrometer - 0.000001 meters.
/// </summary>
public record struct Micrometer : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Micrometer";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "μm";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Micrometer() { }
};

/// <summary>
/// Nanometer - 0.000000001 meters.
/// </summary>
public record struct Nanometer : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Nanometer";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "nm";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Nanometer() { }
};

/// <summary>
/// Angstrom - 10⁻¹⁰ meters, used for atomic scales.
/// </summary>
public record struct Angstrom : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Angstrom";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "Å";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = AngstromToMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Angstrom() { }
};

/// <summary>
/// Yard - Imperial unit of length.
/// </summary>
public record struct Yard : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Yard";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "yd";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = YardToMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Yard() { }
};

/// <summary>
/// Mile - Imperial unit of length.
/// </summary>
public record struct Mile : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Mile";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "mi";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = MileToMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Mile() { }
};

/// <summary>
/// Kilogram - SI base unit of mass.
/// </summary>
public record struct Kilogram : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Kilogram";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "kg";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Kilogram() { }
};

/// <summary>
/// Gram - 0.001 kilograms.
/// </summary>
public record struct Gram : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Gram";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "g";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Gram() { }
};

/// <summary>
/// Metric ton - 1000 kilograms.
/// </summary>
public record struct Ton : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Ton";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "t";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = TonToKilograms;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Ton() { }
};

/// <summary>
/// Pound - Imperial unit of mass.
/// </summary>
public record struct Pound : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Pound";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "lb";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = PoundToKilograms;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Pound() { }
};

/// <summary>
/// Ounce - Imperial unit of mass.
/// </summary>
public record struct Ounce : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Ounce";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "oz";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = OunceToKilograms;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Ounce() { }
};

/// <summary>
/// Second - SI base unit of time.
/// </summary>
public record struct Second : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Second";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "s";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Second() { }
};

/// <summary>
/// Minute - 60 seconds.
/// </summary>
public record struct Minute : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Minute";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "min";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = MinuteToSeconds;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Minute() { }
};

/// <summary>
/// Hour - 3600 seconds.
/// </summary>
public record struct Hour : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Hour";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "h";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = HourToSeconds;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Hour() { }
};

/// <summary>
/// Day - 86400 seconds.
/// </summary>
public record struct Day : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Day";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "d";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = DayToSeconds;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Day() { }
};

/// <summary>
/// Year - 365.25 days (31557600 seconds).
/// </summary>
public record struct Year : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Year";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "yr";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = YearToSeconds;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Year() { }
};

/// <summary>
/// Millisecond - 0.001 seconds.
/// </summary>
public record struct Millisecond : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Millisecond";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "ms";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Millisecond() { }
};

/// <summary>
/// Microsecond - 0.000001 seconds.
/// </summary>
public record struct Microsecond : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Microsecond";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "μs";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Microsecond() { }
};

/// <summary>
/// Square meter - SI derived unit of area.
/// </summary>
public record struct SquareMeter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "SquareMeter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "m²";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public SquareMeter() { }
};

/// <summary>
/// Square foot - Imperial unit of area.
/// </summary>
public record struct SquareFoot : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "SquareFoot";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "ft²";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = SquareFootToSquareMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public SquareFoot() { }
};

/// <summary>
/// Square inch - Imperial unit of area.
/// </summary>
public record struct SquareInch : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "SquareInch";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "in²";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = SquareInchToSquareMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public SquareInch() { }
};

/// <summary>
/// Cubic meter - SI derived unit of volume.
/// </summary>
public record struct CubicMeter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "CubicMeter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "m³";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public CubicMeter() { }
};

/// <summary>
/// Liter - 0.001 cubic meters.
/// </summary>
public record struct Liter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Liter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "L";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = LiterToCubicMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Liter() { }
};

/// <summary>
/// Milliliter - 0.001 liters.
/// </summary>
public record struct Milliliter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Milliliter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "mL";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Milliliter() { }
};

/// <summary>
/// US gallon - Imperial unit of volume.
/// </summary>
public record struct Gallon : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Gallon";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "gal";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = GallonToCubicMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Gallon() { }
};

/// <summary>
/// Dimensionless - Pure number or ratio with no physical units.
/// </summary>
public record struct Dimensionless : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Dimensionless";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "1";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Dimensionless() { }
};

/// <summary>
/// Radian - SI derived unit of plane angle.
/// </summary>
public record struct Radian : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Radian";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "rad";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Radian() { }
};

/// <summary>
/// Degree - Common unit of plane angle.
/// </summary>
public record struct Degree : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Degree";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "°";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = DegreeToRadians;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Degree() { }
};

/// <summary>
/// Newton - SI derived unit of force.
/// </summary>
public record struct Newton : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Newton";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "N";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Newton() { }
};

/// <summary>
/// Pascal - SI derived unit of pressure.
/// </summary>
public record struct Pascal : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Pascal";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "Pa";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Pascal() { }
};

/// <summary>
/// Meters per second - SI derived unit of velocity.
/// </summary>
public record struct MetersPerSecond : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "MetersPerSecond";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "m/s";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public MetersPerSecond() { }
};

/// <summary>
/// Meters per second squared - SI derived unit of acceleration.
/// </summary>
public record struct MetersPerSecondSquared : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "MetersPerSecondSquared";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "m/s²";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public MetersPerSecondSquared() { }
};

/// <summary>
/// Bar - Metric unit of pressure.
/// </summary>
public record struct Bar : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Bar";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "bar";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = BarToPascals;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Bar() { }
};

/// <summary>
/// Standard atmosphere - Unit of pressure.
/// </summary>
public record struct Atmosphere : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Atmosphere";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "atm";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = AtmosphereToPascals;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Atmosphere() { }
};

/// <summary>
/// Pounds per square inch - Imperial unit of pressure.
/// </summary>
public record struct Psi : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Psi";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "psi";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = PsiToPascals;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Psi() { }
};

/// <summary>
/// Kilometers per hour - Common unit of velocity.
/// </summary>
public record struct KilometersPerHour : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "KilometersPerHour";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "km/h";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = KilometersPerHourToMetersPerSecond;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public KilometersPerHour() { }
};

/// <summary>
/// Miles per hour - Imperial unit of velocity.
/// </summary>
public record struct MilesPerHour : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "MilesPerHour";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "mph";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = MilesPerHourToMetersPerSecond;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public MilesPerHour() { }
};

/// <summary>
/// Joule - SI derived unit of energy.
/// </summary>
public record struct Joule : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Joule";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "J";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Joule() { }
};

/// <summary>
/// Watt - SI derived unit of power.
/// </summary>
public record struct Watt : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Watt";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "W";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Watt() { }
};

/// <summary>
/// Calorie - Thermochemical calorie, energy unit.
/// </summary>
public record struct Calorie : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Calorie";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "cal";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = CalorieToJoules;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Calorie() { }
};

/// <summary>
/// Kilowatt-hour - Common unit of electrical energy.
/// </summary>
public record struct KilowattHour : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "KilowattHour";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "kWh";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = KilowattHourToJoules;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public KilowattHour() { }
};

/// <summary>
/// Mechanical horsepower - Imperial unit of power.
/// </summary>
public record struct Horsepower : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Horsepower";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "hp";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = HorsepowerToWatts;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Horsepower() { }
};

/// <summary>
/// Newton-second - SI derived unit of momentum.
/// </summary>
public record struct NewtonSecond : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "NewtonSecond";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "N⋅s";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public NewtonSecond() { }
};

/// <summary>
/// Electron volt - Energy unit equal to electron charge times one volt.
/// </summary>
public record struct ElectronVolt : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "ElectronVolt";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "eV";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = ElectronVoltToJoules;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public ElectronVolt() { }
};

/// <summary>
/// Newton-meter - SI derived unit of torque.
/// </summary>
public record struct NewtonMeter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "NewtonMeter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "N⋅m";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public NewtonMeter() { }
};

/// <summary>
/// Pound-foot - Imperial unit of torque.
/// </summary>
public record struct PoundFoot : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "PoundFoot";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "lb⋅ft";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = PoundFootToNewtonMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public PoundFoot() { }
};

/// <summary>
/// Kilogram-meter squared - SI derived unit of moment of inertia.
/// </summary>
public record struct KilogramMeterSquared : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "KilogramMeterSquared";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "kg⋅m²";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public KilogramMeterSquared() { }
};

/// <summary>
/// Kilogram-meter squared per second - SI derived unit of angular momentum.
/// </summary>
public record struct KilogramMeterSquaredPerSecond : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "KilogramMeterSquaredPerSecond";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "kg⋅m²/s";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public KilogramMeterSquaredPerSecond() { }
};

/// <summary>
/// Kelvin - SI base unit of thermodynamic temperature.
/// </summary>
public record struct Kelvin : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Kelvin";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "K";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Kelvin() { }
};

/// <summary>
/// Celsius - Common temperature scale.
/// </summary>
public record struct Celsius : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Celsius";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "°C";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = CelsiusToKelvinOffset;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Celsius() { }
};

/// <summary>
/// Fahrenheit - Imperial temperature scale.
/// </summary>
public record struct Fahrenheit : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Fahrenheit";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "°F";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Imperial;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = FahrenheitScale;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = FahrenheitToKelvinOffset;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Fahrenheit() { }
};

/// <summary>
/// Ampere - SI base unit of electric current.
/// </summary>
public record struct Ampere : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Ampere";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "A";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Ampere() { }
};

/// <summary>
/// Volt - SI derived unit of electric potential.
/// </summary>
public record struct Volt : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Volt";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "V";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Volt() { }
};

/// <summary>
/// Volt per meter - SI derived unit of electric field strength.
/// </summary>
public record struct VoltPerMeter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "VoltPerMeter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "V/m";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public VoltPerMeter() { }
};

/// <summary>
/// Ohm - SI derived unit of electric resistance.
/// </summary>
public record struct Ohm : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Ohm";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "Ω";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Ohm() { }
};

/// <summary>
/// Coulomb - SI derived unit of electric charge.
/// </summary>
public record struct Coulomb : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Coulomb";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "C";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Coulomb() { }
};

/// <summary>
/// Farad - SI derived unit of electric capacitance.
/// </summary>
public record struct Farad : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Farad";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "F";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Farad() { }
};

/// <summary>
/// Radians per second - SI derived unit of angular velocity.
/// </summary>
public record struct RadiansPerSecond : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "RadiansPerSecond";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "rad/s";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public RadiansPerSecond() { }
};

/// <summary>
/// Revolutions per minute - Common unit of angular velocity.
/// </summary>
public record struct RevolutionsPerMinute : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "RevolutionsPerMinute";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "rpm";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = RevolutionsPerMinuteToRadiansPerSecond;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public RevolutionsPerMinute() { }
};

/// <summary>
/// Radians per second squared - SI derived unit of angular acceleration.
/// </summary>
public record struct RadiansPerSecondSquared : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "RadiansPerSecondSquared";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "rad/s²";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public RadiansPerSecondSquared() { }
};

/// <summary>
/// Hertz - SI derived unit of frequency.
/// </summary>
public record struct Hertz : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Hertz";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "Hz";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Hertz() { }
};

/// <summary>
/// Candela - SI base unit of luminous intensity.
/// </summary>
public record struct Candela : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Candela";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "cd";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Candela() { }
};

/// <summary>
/// Lumen - SI derived unit of luminous flux.
/// </summary>
public record struct Lumen : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Lumen";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "lm";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Lumen() { }
};

/// <summary>
/// Lux - SI derived unit of illuminance.
/// </summary>
public record struct Lux : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Lux";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "lx";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Lux() { }
};

/// <summary>
/// Diopter - SI unit of optical power.
/// </summary>
public record struct Diopter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Diopter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "D";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Diopter() { }
};

/// <summary>
/// Becquerel - SI derived unit of radioactive activity.
/// </summary>
public record struct Becquerel : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Becquerel";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "Bq";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Becquerel() { }
};

/// <summary>
/// Gray - SI derived unit of absorbed dose.
/// </summary>
public record struct Gray : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Gray";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "Gy";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Gray() { }
};

/// <summary>
/// Sievert - SI derived unit of equivalent dose.
/// </summary>
public record struct Sievert : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Sievert";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "Sv";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Sievert() { }
};

/// <summary>
/// Barn - Unit of nuclear cross section.
/// </summary>
public record struct Barn : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Barn";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "b";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.Other;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = BarnToSquareMeters;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Barn() { }
};

/// <summary>
/// Kilogram per cubic meter - SI derived unit of density.
/// </summary>
public record struct KilogramPerCubicMeter : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "KilogramPerCubicMeter";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "kg/m³";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public KilogramPerCubicMeter() { }
};

/// <summary>
/// Mole - SI base unit of amount of substance.
/// </summary>
public record struct Mole : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Mole";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "mol";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIBase;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = 1;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Mole() { }
};

/// <summary>
/// Molar - Moles per liter concentration.
/// </summary>
public record struct Molar : IUnit
{
	/// <summary>Gets the full name of the unit.</summary>
	public readonly string Name = "Molar";
	/// <summary>Gets the symbol/abbreviation of the unit.</summary>
	public readonly string Symbol = "M";
	/// <summary>Gets the unit system this unit belongs to.</summary>
	public readonly UnitSystem System = UnitSystem.SIDerived;
	/// <summary>Gets the multiplication factor to convert to the base unit.</summary>
	public readonly double ToBaseFactor = MolarToCubicMeter;
	/// <summary>Gets the offset to add when converting to the base unit (0.0 for linear units).</summary>
	public readonly double ToBaseOffset = 0;
	/// <summary>Initializes a new instance of the unit.</summary>
	public Molar() { }
};

