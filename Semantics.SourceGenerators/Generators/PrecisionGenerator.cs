// Copyright (c) ktsu.dev
// All rights reserved.
// Licensed under the MIT license.

namespace Semantics.SourceGenerators;

using System.Linq;
using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Semantics.SourceGenerators.Models;

/// <summary>
/// Source generator that creates the StorageTypes.cs file from JSON metadata.
/// </summary>
[Generator]
public class PrecisionGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// Find the precision metadata JSON file
		IncrementalValuesProvider<string> metadataFiles = context.AdditionalTextsProvider
			.Where(file => file.Path.EndsWith("precision.json", System.StringComparison.InvariantCulture))
			.Select((file, cancellationToken) => file.GetText(cancellationToken)?.ToString() ?? "")
			.Where(content => !string.IsNullOrEmpty(content));

		// Generate code from metadata
		context.RegisterSourceOutput(metadataFiles, (ctx, jsonContent) =>
		{
			if (string.IsNullOrEmpty(jsonContent))
			{
				return;
			}

			try
			{
				JsonSerializerOptions options = new()
				{
					PropertyNameCaseInsensitive = true
				};

				PrecisionMetadata metadata = JsonSerializer.Deserialize<PrecisionMetadata>(jsonContent, options) ??
					throw new JsonException("Failed to deserialize units metadata");

				if (metadata?.StorageTypes == null)
				{
					return;
				}

				// Generate the StorageTypes.cs source code
				string sourceCode = GenerateStorageTypesClass(metadata);

				// Add the generated source to the compilation
				ctx.AddSource("StorageTypes.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
			}
			catch (JsonException ex)
			{
				// Report JSON parsing error
				DiagnosticDescriptor descriptor = new(
					"PREC001",
					"JSON parsing error",
					"Failed to parse precision metadata JSON: {0}",
					"SourceGenerator",
					DiagnosticSeverity.Error,
					isEnabledByDefault: true);

				ctx.ReportDiagnostic(Diagnostic.Create(descriptor, Location.None, ex.Message));
			}
		});
	}

	private static string GenerateStorageTypesClass(PrecisionMetadata metadata)
	{
		StringBuilder builder = new();

		builder.AppendLine("// Copyright (c) ktsu.dev");
		builder.AppendLine("// All rights reserved.");
		builder.AppendLine("// Licensed under the MIT license.");
		builder.AppendLine("// <auto-generated />");
		builder.AppendLine();
		builder.AppendLine("namespace ktsu.Semantics;");
		builder.AppendLine();
		builder.AppendLine("using System;");
		builder.AppendLine("using System.Collections.Generic;");
		builder.AppendLine();
		builder.AppendLine("/// <summary>");
		builder.AppendLine("/// Available storage types for numeric values in the Semantics library.");
		builder.AppendLine("/// </summary>");
		builder.AppendLine("public static class StorageTypes");
		builder.AppendLine("{");

		// Generate constants for each storage type
		foreach (string storageType in metadata.StorageTypes.OrderBy(t => t))
		{
			builder.AppendLine($"\t/// <summary>The {storageType} storage type.</summary>");
			builder.AppendLine($"\tpublic static readonly Type {storageType.ToUpperInvariant()} = typeof({storageType});");
			builder.AppendLine();
		}

		// Generate an All property
		builder.AppendLine("\t/// <summary>Gets all available storage types.</summary>");
		builder.AppendLine("\tpublic static readonly IReadOnlyList<Type> All = new List<Type>");
		builder.AppendLine("\t{");
		foreach (string storageType in metadata.StorageTypes.OrderBy(t => t))
		{
			builder.AppendLine($"\t\t{storageType.ToUpperInvariant()},");
		}
		builder.AppendLine("\t};");

		// Generate names property
		builder.AppendLine();
		builder.AppendLine("\t/// <summary>Gets the names of all available storage types.</summary>");
		builder.AppendLine("\tpublic static readonly IReadOnlyList<string> Names = new List<string>");
		builder.AppendLine("\t{");
		foreach (string storageType in metadata.StorageTypes.OrderBy(t => t))
		{
			builder.AppendLine($"\t\t\"{storageType}\",");
		}
		builder.AppendLine("\t};");

		builder.AppendLine("}");

		return builder.ToString();
	}
}
